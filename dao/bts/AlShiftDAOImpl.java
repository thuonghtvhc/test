package dao.bts;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import vo.bts.AlShift;
import vo.bts.SYS_PARAMETER;

public class AlShiftDAOImpl extends SqlMapClientDaoSupport implements AlShiftDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_SHIFT
     *
     * @ibatorgenerated Thu Nov 15 09:39:45 ICT 2012
     */
    public AlShiftDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_SHIFT
     *
     * @ibatorgenerated Thu Nov 15 09:39:45 ICT 2012
     */
    public int deleteByPrimaryKey(Integer shiftId) {
        AlShift key = new AlShift();
        key.setShiftId(shiftId);
        int rows = getSqlMapClientTemplate().delete("AL_SHIFT1.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_SHIFT
     *
     * @ibatorgenerated Thu Nov 15 09:39:45 ICT 2012
     */
    public void insert(AlShift record) {
        getSqlMapClientTemplate().insert("AL_SHIFT1.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_SHIFT
     *
     * @ibatorgenerated Thu Nov 15 09:39:45 ICT 2012
     */
    public void insertSelective(AlShift record) {
        getSqlMapClientTemplate().insert("AL_SHIFT1.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_SHIFT
     *
     * @ibatorgenerated Thu Nov 15 09:39:45 ICT 2012
     */
    public AlShift selectByPrimaryKey(Integer shiftId) {
        AlShift key = new AlShift();
        key.setShiftId(shiftId);
        AlShift record = (AlShift) getSqlMapClientTemplate().queryForObject("AL_SHIFT1.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_SHIFT
     *
     * @ibatorgenerated Thu Nov 15 09:39:45 ICT 2012
     */
    public int updateByPrimaryKeySelective(AlShift record) {
        int rows = getSqlMapClientTemplate().update("AL_SHIFT1.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table AL_SHIFT
     *
     * @ibatorgenerated Thu Nov 15 09:39:45 ICT 2012
     */
    public int updateByPrimaryKey(AlShift record) {
        int rows = getSqlMapClientTemplate().update("AL_SHIFT1.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }
    
	
	@Override
	public AlShift getCaTrucGanNhat(String region,String maPhong) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_REGION", region);
		map.put("P_MA_PHONG", maPhong);
		map.put("P_DATA", null);
		AlShift record = (AlShift)getSqlMapClientTemplate().queryForObject("AL_SHIFT1.getCaTrucGanNhat", map);
		return record;
	}

	@Override
	public AlShift getCaTruc(String caTK, String ngayTK,String region,String maPhong) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_CATRUC", caTK);
		map.put("P_NGAYTRUC", ngayTK);
		map.put("P_REGION", region);
		map.put("P_MA_PHONG", maPhong);
		map.put("P_DATA", null);
		AlShift record = (AlShift)getSqlMapClientTemplate().queryForObject("AL_SHIFT1.getCaTruc", map);
		return record;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<SYS_PARAMETER> titleCaTrucList(String warningTp, String typeForm) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_TYPE", warningTp);  
		map.put("P_FORM", typeForm); 
		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("AL_SHIFT1.titleCaTrucList", map);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<AlShift> getNoiDungAtShif( String shiftid,
			String ngayTKTo, String ngayTK, String type,String region, String maPhong) {
		Map<String, Object> map = new HashMap<String, Object>();
   		map.put("P_SHIFT_ID", shiftid);
   		map.put("P_DAY_TO", ngayTKTo);
   		map.put("P_DAY", ngayTK);
   		map.put("P_TYPE_FORM", type);
   		map.put("P_REGION", region);
   		map.put("P_MA_PHONG", maPhong);
   		map.put("P_DATA", null);
		return getSqlMapClientTemplate().queryForList("AL_SHIFT1.getNoiDungAtShif", map);
	}

	@Override
	public int insertShiftAndWork(AlShift catruc,String maPhong) {
		
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_SHIFT_ID", catruc.getShiftId());
   		parms.put("P_GIAO_USERNAME", catruc.getGiaoUsername());
   		parms.put("P_GIAO_CA_VIEN", catruc.getGiaoCaVien());
   		parms.put("P_GIAO_CA_TRUC", catruc.getGiaoCaTruc());
   		parms.put("P_GIAO_NGAY_TRUC", catruc.getGiaoNgayTruc());
   		parms.put("P_NHAN_USERNAME", catruc.getNhanUsername());
   		parms.put("P_NHAN_CA_VIEN", catruc.getNhanCaVien());
   		parms.put("P_NHAN_CA_TRUC", catruc.getNhanCaTruc());
   		parms.put("P_NHAN_NGAY_TRUC", catruc.getNhanNgayTruc());
   		parms.put("P_NOI_DUNG", catruc.getNoiDung());
   		parms.put("P_IS_ACTIVE", catruc.getIsActive());
   		parms.put("P_CREATED_BY", catruc.getCreatedBy());
   		parms.put("P_CREATE_DATE", catruc.getCreateDate());
   		parms.put("P_MA_PHONG",maPhong);
   		parms.put("P_REGION",catruc.getRegion());
   		parms.put("P_NHAN_CONG_CU", catruc.getNhanCongCu());
   		parms.put("P_NHAN_TAI_SAN", catruc.getNhanTaiSan());
   		parms.put("P_GIAO_CONG_CU", catruc.getGiaoCongCu());
   		parms.put("P_GIAO_TAI_SAN", catruc.getGiaoTaiSan());
           int rows = getSqlMapClientTemplate().update("AL_SHIFT1.insertShiftAndWork", parms);
           return rows;
	}
	/*Kiem tra dieu kien ban giao ca có thoa man hay khong cac dac diem sau:
	 * Công việc cố định trong ca: fix giờ hoàn thành trong ca. Giao ca mà trường Thời gian hoàn thành rỗng thì Alert và không cho giao ca.
	 * - Công việc thực hiện trong ca:  Giao ca mà nội dung rỗng thì Alert và không cho giao ca (ít nhất cũng có xử lý KPI theo giờ chứ không ca nào không có việc). 
	 * Công việc bàn giao trong ca: Giao ca mà nội dung rỗng thì Alert và không cho giao ca (không có công việc cũng phải gõ chữ “Không”).
	 * Ket qua tra ve 1-2/cong viec co dinh khong thoa man - cong viec thuc hien trong ca khong thoa man.
	 * */
	@Override
	public int getAlShiftWorkCheck(String giaoNgayTruc, String giaoCaTruc,
			String giaoUsername, String giaoCaVien,String noiDung,String region) {
		Map<String, Object> parms = new HashMap<String, Object>();
   		parms.put("P_NGAY_TRUC", giaoNgayTruc);
   		parms.put("P_CA_TRUC", giaoCaTruc);
   		parms.put("P_TRUONG_CA", giaoUsername);
   		parms.put("P_CA_VIEN", giaoCaVien);
   		parms.put("P_NOI_DUNG", noiDung);
   		parms.put("P_REGION", region);
   		parms.put("P_DATA", null);
   		getSqlMapClientTemplate().queryForObject("AL_SHIFT1.getAlShiftWorkCheck", parms);
          	Integer record = (Integer) parms.get("P_DATA");
          	return record;
	}

	@Override
	public AlShift checkCaTruc(String giaoCaTruc, String giaoNgayTruc,String region,String maPhong) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_CATRUC", giaoCaTruc);
		map.put("P_NGAYTRUC", giaoNgayTruc);
		map.put("P_REGION", region);
		map.put("P_MA_PHONG", maPhong);
		map.put("P_DATA", null);
		AlShift record = (AlShift)getSqlMapClientTemplate().queryForObject("AL_SHIFT1.checkCaTruc", map);
		return record;
	}

	@Override
	public AlShift checkRoleCaTruc(String caTK, String ngayTK, String username,
			String region) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_CATRUC", caTK);
		map.put("P_NGAYTRUC", ngayTK);
		map.put("P_USERNAME", username);
		map.put("P_REGION", region);
		map.put("P_DATA", null);
		AlShift record = (AlShift)getSqlMapClientTemplate().queryForObject("AL_SHIFT1.checkRoleCaTruc", map);
		return record;
	}

	@Override
	public AlShift getCaTrucByMaPhong(String maPhong) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_MA_PHONG", maPhong);
		map.put("P_DATA", null);
		AlShift record = (AlShift)getSqlMapClientTemplate().queryForObject("AL_SHIFT1.getCaTrucByMaPhong", map);
		return record;
	}

	@Override
	public AlShift getCaTrucByCaVaMaPhong(String caTruc, String ngayTruc,
			String maPhong) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("P_CATRUC", caTruc);
		map.put("P_NGAYTRUC", ngayTruc);
		map.put("P_MAPHONG", maPhong);
		map.put("P_DATA", null);
		AlShift record = (AlShift)getSqlMapClientTemplate().queryForObject("AL_SHIFT1.getCaTrucByCaVaMaPhong", map);
		return record;
	}
	// update thong tin de xuat kien nghi trong ca
	@Override
	public int updateDeXuatKienNghi(AlShift alShift) {
		Map<String, Object> parms = new HashMap<String, Object>();
		parms.put("P_ID", alShift.getId());
		parms.put("P_NHAN_XET", alShift.getNhanXet());
		parms.put("P_MODIFIED_BY", alShift.getModifiedBy());
		getSqlMapClientTemplate().queryForObject("AL_SHIFT1.updateDeXuatKienNghi", parms);
        return 1;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<String> getRegion() {
		return getSqlMapClientTemplate().queryForList("AL_SHIFT1.getRegion");
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<AlShift> filter(String region, String maPhong, String ngayTruc, String caTruc, String ngayTrucCaTruoc,
			String caTruoc) {
		
		Map<String, String> map = new HashMap<String, String>();
		map.put("p_region", region);
		map.put("p_ma_phong", maPhong);
		map.put("p_ngay_truc", ngayTruc);
		map.put("p_ca_truc", caTruc);
		map.put("p_ngay_truc_ct", ngayTrucCaTruoc);
		map.put("p_ca_truoc", caTruoc);
		map.put("p_data", null);
		return getSqlMapClientTemplate().queryForList("AL_SHIFT1.filter", map);
	}
	

}